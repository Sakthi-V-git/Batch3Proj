Promise -- https://stackoverflow.com/questions/37364973/what-is-the-difference-between-promises-and-observables

A Promise handles a single event when an async operation completes or fails.

Note: There are Promise libraries out there that support cancellation, but ES6 Promise doesn't so far.

Observable

An Observable is like a Stream (in many languages) and allows to pass zero or more events where the callback is called for each event.

Often Observable is preferred over Promise because it provides the features of Promise and more. With Observable it doesn't matter if you want to handle 0, 1, or multiple events. You can utilize the same API in each case.

Observable also has the advantage over Promise to be cancelable. If the result of an HTTP request to a server or some other expensive async operation isn't needed anymore, the Subscription of an Observable allows to cancel the subscription, while a Promise will eventually call the success or failed callback even when you don't need the notification or the result it provides anymore.

Observable provides operators like map, forEach, reduce, ... similar to an array

There are also powerful operators like retry(), or replay(), ... that are often quite handy.

subscription:
https://blog.bitsrc.io/6-ways-to-unsubscribe-from-observables-in-angular-ab912819a78f
  we are trying to read observed or emitted value
  -- subscription should always be unsubscribed --> subscription.unsubscribe()
- Async pipe [most opted way], as we dont need to unsubscribe
- then from typescript
      -first() -- subscribes only 1s
      -take(n) -- if n=5 it will take 5 times
      -takeUntil(notifier) --[using subject to unsubscribe] -- conditional unsubscription using a paramter
      -takeWhile(predicate) -- u can provide a condition, unless it satisifys it continuously subscribes

Subject: 
            
            - subject() --> we can initiate without any initial vlaue, it cant be subscribed on initial load
            - BehaviourSubject() --> it needs an initial value
            - ReplySubject() --- ReplySubject(3), --> this observes and emit last 3 observed value
            - AsyncSubject --- provides asynchronous subscription

ngRx --> design pattern -- which provides better data connectivity between components
https://www.learnrxjs.io/learn-rxjs/operators/combination --> has high level Rxjs concepts

common mappers used while calling APIs or observables
forkjoin - this will make sure all the API calls been completed and it will merge the data and provides result after it completes
switchmap - it always switches to latest provided value, ignores the prvious request
Map - if you are changing the structure of the array and trying to mutate the object
Tap - it avoids mutation using Tap, it wont change the structure of array
mergeMap


